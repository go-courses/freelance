// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	User
	UserId
	ManyUsers
	Task
	TaskId
	ManyTasks
	Billing
	BillingId
	ManyBillings
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Id      int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Utype   string `protobuf:"bytes,3,opt,name=utype" json:"utype,omitempty"`
	Balance int32  `protobuf:"varint,4,opt,name=balance" json:"balance,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User) GetUtype() string {
	if m != nil {
		return m.Utype
	}
	return ""
}

func (m *User) GetBalance() int32 {
	if m != nil {
		return m.Balance
	}
	return 0
}

type UserId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *UserId) Reset()                    { *m = UserId{} }
func (m *UserId) String() string            { return proto.CompactTextString(m) }
func (*UserId) ProtoMessage()               {}
func (*UserId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *UserId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ManyUsers struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *ManyUsers) Reset()                    { *m = ManyUsers{} }
func (m *ManyUsers) String() string            { return proto.CompactTextString(m) }
func (*ManyUsers) ProtoMessage()               {}
func (*ManyUsers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ManyUsers) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type Task struct {
	Id          int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Creator     int64  `protobuf:"varint,3,opt,name=creator" json:"creator,omitempty"`
	Executor    int64  `protobuf:"varint,4,opt,name=executor" json:"executor,omitempty"`
	Price       int32  `protobuf:"varint,5,opt,name=price" json:"price,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Task) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetCreator() int64 {
	if m != nil {
		return m.Creator
	}
	return 0
}

func (m *Task) GetExecutor() int64 {
	if m != nil {
		return m.Executor
	}
	return 0
}

func (m *Task) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Task) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type TaskId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *TaskId) Reset()                    { *m = TaskId{} }
func (m *TaskId) String() string            { return proto.CompactTextString(m) }
func (*TaskId) ProtoMessage()               {}
func (*TaskId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TaskId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ManyTasks struct {
	Tasks []*Task `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ManyTasks) Reset()                    { *m = ManyTasks{} }
func (m *ManyTasks) String() string            { return proto.CompactTextString(m) }
func (*ManyTasks) ProtoMessage()               {}
func (*ManyTasks) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ManyTasks) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Billing struct {
	Id       int64                       `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Sender   int64                       `protobuf:"varint,2,opt,name=sender" json:"sender,omitempty"`
	Reciever int64                       `protobuf:"varint,3,opt,name=reciever" json:"reciever,omitempty"`
	Amount   int32                       `protobuf:"varint,4,opt,name=amount" json:"amount,omitempty"`
	TimeBill *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=time_bill,json=timeBill" json:"time_bill,omitempty"`
	TaskId   int32                       `protobuf:"varint,6,opt,name=task_id,json=taskId" json:"task_id,omitempty"`
	Btype    string                      `protobuf:"bytes,7,opt,name=btype" json:"btype,omitempty"`
}

func (m *Billing) Reset()                    { *m = Billing{} }
func (m *Billing) String() string            { return proto.CompactTextString(m) }
func (*Billing) ProtoMessage()               {}
func (*Billing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Billing) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Billing) GetSender() int64 {
	if m != nil {
		return m.Sender
	}
	return 0
}

func (m *Billing) GetReciever() int64 {
	if m != nil {
		return m.Reciever
	}
	return 0
}

func (m *Billing) GetAmount() int32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *Billing) GetTimeBill() *google_protobuf1.Timestamp {
	if m != nil {
		return m.TimeBill
	}
	return nil
}

func (m *Billing) GetTaskId() int32 {
	if m != nil {
		return m.TaskId
	}
	return 0
}

func (m *Billing) GetBtype() string {
	if m != nil {
		return m.Btype
	}
	return ""
}

type BillingId struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *BillingId) Reset()                    { *m = BillingId{} }
func (m *BillingId) String() string            { return proto.CompactTextString(m) }
func (*BillingId) ProtoMessage()               {}
func (*BillingId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *BillingId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ManyBillings struct {
	Billings []*Billing `protobuf:"bytes,1,rep,name=billings" json:"billings,omitempty"`
}

func (m *ManyBillings) Reset()                    { *m = ManyBillings{} }
func (m *ManyBillings) String() string            { return proto.CompactTextString(m) }
func (*ManyBillings) ProtoMessage()               {}
func (*ManyBillings) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ManyBillings) GetBillings() []*Billing {
	if m != nil {
		return m.Billings
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*UserId)(nil), "api.UserId")
	proto.RegisterType((*ManyUsers)(nil), "api.ManyUsers")
	proto.RegisterType((*Task)(nil), "api.Task")
	proto.RegisterType((*TaskId)(nil), "api.TaskId")
	proto.RegisterType((*ManyTasks)(nil), "api.ManyTasks")
	proto.RegisterType((*Billing)(nil), "api.Billing")
	proto.RegisterType((*BillingId)(nil), "api.BillingId")
	proto.RegisterType((*ManyBillings)(nil), "api.ManyBillings")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DoUsers service

type DoUsersClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error)
	SelectUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
	ListUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*ManyUsers, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error)
}

type doUsersClient struct {
	cc *grpc.ClientConn
}

func NewDoUsersClient(cc *grpc.ClientConn) DoUsersClient {
	return &doUsersClient{cc}
}

func (c *doUsersClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserId, error) {
	out := new(UserId)
	err := grpc.Invoke(ctx, "/api.DoUsers/CreateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doUsersClient) SelectUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/api.DoUsers/SelectUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doUsersClient) ListUsers(ctx context.Context, in *User, opts ...grpc.CallOption) (*ManyUsers, error) {
	out := new(ManyUsers)
	err := grpc.Invoke(ctx, "/api.DoUsers/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doUsersClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/api.DoUsers/UpdateUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doUsersClient) DeleteUser(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/api.DoUsers/DeleteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DoUsers service

type DoUsersServer interface {
	CreateUser(context.Context, *User) (*UserId, error)
	SelectUser(context.Context, *UserId) (*User, error)
	ListUsers(context.Context, *User) (*ManyUsers, error)
	UpdateUser(context.Context, *User) (*User, error)
	DeleteUser(context.Context, *UserId) (*User, error)
}

func RegisterDoUsersServer(s *grpc.Server, srv DoUsersServer) {
	s.RegisterService(&_DoUsers_serviceDesc, srv)
}

func _DoUsers_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUsersServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoUsers/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUsersServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoUsers_SelectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUsersServer).SelectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoUsers/SelectUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUsersServer).SelectUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoUsers_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUsersServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoUsers/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUsersServer).ListUsers(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoUsers_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUsersServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoUsers/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUsersServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoUsers_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoUsersServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoUsers/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoUsersServer).DeleteUser(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoUsers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DoUsers",
	HandlerType: (*DoUsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _DoUsers_CreateUser_Handler,
		},
		{
			MethodName: "SelectUser",
			Handler:    _DoUsers_SelectUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _DoUsers_ListUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _DoUsers_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _DoUsers_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for DoTasks service

type DoTasksClient interface {
	CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskId, error)
	SelectTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
	ListTasks(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ManyTasks, error)
	UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
	DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error)
}

type doTasksClient struct {
	cc *grpc.ClientConn
}

func NewDoTasksClient(cc *grpc.ClientConn) DoTasksClient {
	return &doTasksClient{cc}
}

func (c *doTasksClient) CreateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*TaskId, error) {
	out := new(TaskId)
	err := grpc.Invoke(ctx, "/api.DoTasks/CreateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTasksClient) SelectTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/api.DoTasks/SelectTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTasksClient) ListTasks(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ManyTasks, error) {
	out := new(ManyTasks)
	err := grpc.Invoke(ctx, "/api.DoTasks/ListTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTasksClient) UpdateTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/api.DoTasks/UpdateTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doTasksClient) DeleteTask(ctx context.Context, in *TaskId, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := grpc.Invoke(ctx, "/api.DoTasks/DeleteTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DoTasks service

type DoTasksServer interface {
	CreateTask(context.Context, *Task) (*TaskId, error)
	SelectTask(context.Context, *TaskId) (*Task, error)
	ListTasks(context.Context, *Task) (*ManyTasks, error)
	UpdateTask(context.Context, *Task) (*Task, error)
	DeleteTask(context.Context, *TaskId) (*Task, error)
}

func RegisterDoTasksServer(s *grpc.Server, srv DoTasksServer) {
	s.RegisterService(&_DoTasks_serviceDesc, srv)
}

func _DoTasks_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTasksServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoTasks/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTasksServer).CreateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTasks_SelectTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTasksServer).SelectTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoTasks/SelectTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTasksServer).SelectTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTasks_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTasksServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoTasks/ListTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTasksServer).ListTasks(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTasks_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTasksServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoTasks/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTasksServer).UpdateTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoTasks_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoTasksServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoTasks/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoTasksServer).DeleteTask(ctx, req.(*TaskId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoTasks_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DoTasks",
	HandlerType: (*DoTasksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _DoTasks_CreateTask_Handler,
		},
		{
			MethodName: "SelectTask",
			Handler:    _DoTasks_SelectTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _DoTasks_ListTasks_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _DoTasks_UpdateTask_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _DoTasks_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// Client API for DoBillings service

type DoBillingsClient interface {
	CreateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*BillingId, error)
	SelectBilling(ctx context.Context, in *BillingId, opts ...grpc.CallOption) (*Billing, error)
	ListBillings(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*ManyBillings, error)
	UpdateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error)
	DeleteBilling(ctx context.Context, in *BillingId, opts ...grpc.CallOption) (*Billing, error)
}

type doBillingsClient struct {
	cc *grpc.ClientConn
}

func NewDoBillingsClient(cc *grpc.ClientConn) DoBillingsClient {
	return &doBillingsClient{cc}
}

func (c *doBillingsClient) CreateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*BillingId, error) {
	out := new(BillingId)
	err := grpc.Invoke(ctx, "/api.DoBillings/CreateBilling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doBillingsClient) SelectBilling(ctx context.Context, in *BillingId, opts ...grpc.CallOption) (*Billing, error) {
	out := new(Billing)
	err := grpc.Invoke(ctx, "/api.DoBillings/SelectBilling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doBillingsClient) ListBillings(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*ManyBillings, error) {
	out := new(ManyBillings)
	err := grpc.Invoke(ctx, "/api.DoBillings/ListBillings", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doBillingsClient) UpdateBilling(ctx context.Context, in *Billing, opts ...grpc.CallOption) (*Billing, error) {
	out := new(Billing)
	err := grpc.Invoke(ctx, "/api.DoBillings/UpdateBilling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doBillingsClient) DeleteBilling(ctx context.Context, in *BillingId, opts ...grpc.CallOption) (*Billing, error) {
	out := new(Billing)
	err := grpc.Invoke(ctx, "/api.DoBillings/DeleteBilling", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DoBillings service

type DoBillingsServer interface {
	CreateBilling(context.Context, *Billing) (*BillingId, error)
	SelectBilling(context.Context, *BillingId) (*Billing, error)
	ListBillings(context.Context, *Billing) (*ManyBillings, error)
	UpdateBilling(context.Context, *Billing) (*Billing, error)
	DeleteBilling(context.Context, *BillingId) (*Billing, error)
}

func RegisterDoBillingsServer(s *grpc.Server, srv DoBillingsServer) {
	s.RegisterService(&_DoBillings_serviceDesc, srv)
}

func _DoBillings_CreateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoBillingsServer).CreateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoBillings/CreateBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoBillingsServer).CreateBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoBillings_SelectBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoBillingsServer).SelectBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoBillings/SelectBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoBillingsServer).SelectBilling(ctx, req.(*BillingId))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoBillings_ListBillings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoBillingsServer).ListBillings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoBillings/ListBillings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoBillingsServer).ListBillings(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoBillings_UpdateBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Billing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoBillingsServer).UpdateBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoBillings/UpdateBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoBillingsServer).UpdateBilling(ctx, req.(*Billing))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoBillings_DeleteBilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillingId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoBillingsServer).DeleteBilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DoBillings/DeleteBilling",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoBillingsServer).DeleteBilling(ctx, req.(*BillingId))
	}
	return interceptor(ctx, in, info, handler)
}

var _DoBillings_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DoBillings",
	HandlerType: (*DoBillingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBilling",
			Handler:    _DoBillings_CreateBilling_Handler,
		},
		{
			MethodName: "SelectBilling",
			Handler:    _DoBillings_SelectBilling_Handler,
		},
		{
			MethodName: "ListBillings",
			Handler:    _DoBillings_ListBillings_Handler,
		},
		{
			MethodName: "UpdateBilling",
			Handler:    _DoBillings_UpdateBilling_Handler,
		},
		{
			MethodName: "DeleteBilling",
			Handler:    _DoBillings_DeleteBilling_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 723 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0x95, 0xf3, 0xac, 0x6f, 0x1e, 0xd0, 0xa1, 0xb4, 0xc6, 0x54, 0x6a, 0x34, 0xab, 0x28, 0x42,
	0x89, 0x14, 0x16, 0xa0, 0x0a, 0x36, 0x50, 0x55, 0x54, 0x82, 0x8d, 0x69, 0x37, 0x6c, 0x2a, 0x27,
	0x1e, 0xaa, 0x11, 0x8e, 0x6d, 0xd9, 0x0e, 0xa2, 0x42, 0x6c, 0xf8, 0x05, 0xb6, 0x7c, 0x0a, 0xbf,
	0xc0, 0x8a, 0x5f, 0xe0, 0x2f, 0xd8, 0xa0, 0x7b, 0x67, 0x3c, 0xb1, 0x9d, 0x22, 0x60, 0x37, 0x77,
	0xee, 0xdc, 0x33, 0xe7, 0x1c, 0x9f, 0x31, 0xd8, 0x7e, 0x22, 0xa7, 0x49, 0x1a, 0xe7, 0x31, 0x6b,
	0xfa, 0x89, 0x74, 0x0f, 0xaf, 0xe2, 0xf8, 0x2a, 0x14, 0x33, 0x3f, 0x91, 0x33, 0x3f, 0x8a, 0xe2,
	0xdc, 0xcf, 0x65, 0x1c, 0x65, 0xea, 0x88, 0x7b, 0xa4, 0xbb, 0x54, 0x2d, 0xd6, 0x6f, 0x67, 0xb9,
	0x5c, 0x89, 0x2c, 0xf7, 0x57, 0x89, 0x3a, 0xc0, 0xdf, 0x40, 0xeb, 0x22, 0x13, 0x29, 0x1b, 0x42,
	0x43, 0x06, 0x8e, 0x35, 0xb2, 0xc6, 0x4d, 0xaf, 0x21, 0x03, 0xc6, 0xa0, 0x15, 0xf9, 0x2b, 0xe1,
	0x34, 0x46, 0xd6, 0xd8, 0xf6, 0x68, 0xcd, 0xf6, 0xa0, 0xbd, 0xce, 0xaf, 0x13, 0xe1, 0x34, 0x69,
	0x53, 0x15, 0xcc, 0x81, 0xee, 0xc2, 0x0f, 0xfd, 0x68, 0x29, 0x9c, 0xd6, 0xc8, 0x1a, 0xb7, 0xbd,
	0xa2, 0xe4, 0x0e, 0x74, 0x10, 0xfb, 0x2c, 0xa8, 0xa3, 0xf3, 0x07, 0x60, 0xbf, 0xf2, 0xa3, 0x6b,
	0xec, 0x66, 0xec, 0x08, 0xda, 0x6b, 0x5c, 0x38, 0xd6, 0xa8, 0x39, 0xee, 0xcd, 0xed, 0x29, 0x2a,
	0xc4, 0x96, 0xa7, 0xf6, 0xf9, 0x57, 0x0b, 0x5a, 0xe7, 0x7e, 0xf6, 0x6e, 0x8b, 0xe4, 0x08, 0x7a,
	0x81, 0xc8, 0x96, 0xa9, 0x4c, 0x50, 0xb3, 0xe6, 0x5a, 0xde, 0x42, 0x72, 0xcb, 0x54, 0xf8, 0x79,
	0x9c, 0x12, 0xe9, 0xa6, 0x57, 0x94, 0xcc, 0x85, 0x1d, 0xf1, 0x41, 0x2c, 0xd7, 0xd8, 0x6a, 0x51,
	0xcb, 0xd4, 0x28, 0x34, 0x49, 0xe5, 0x52, 0x38, 0x6d, 0x12, 0xa4, 0x0a, 0xb6, 0x0f, 0x9d, 0x2c,
	0xf7, 0xf3, 0x75, 0xe6, 0x74, 0xe8, 0x22, 0x5d, 0xa1, 0x4c, 0x64, 0xf7, 0x67, 0x99, 0xd8, 0x25,
	0x99, 0x39, 0x2e, 0x2a, 0x32, 0xb1, 0xe5, 0xa9, 0x7d, 0xfe, 0xdd, 0x82, 0xee, 0x33, 0x19, 0x86,
	0x32, 0xba, 0xda, 0x52, 0x8a, 0x77, 0x8b, 0x28, 0x10, 0x29, 0x89, 0x6c, 0x7a, 0xba, 0x42, 0x15,
	0xa9, 0x58, 0x4a, 0xf1, 0x5e, 0x14, 0x02, 0x4d, 0x8d, 0x33, 0xfe, 0x2a, 0x5e, 0x47, 0xb9, 0xfe,
	0x2e, 0xba, 0x62, 0x8f, 0xc0, 0xc6, 0x14, 0x5c, 0x2e, 0x64, 0x18, 0x92, 0xc2, 0xde, 0xdc, 0x9d,
	0xaa, 0x9c, 0x4c, 0x8b, 0x9c, 0x4c, 0xcf, 0x8b, 0x9c, 0x78, 0x3b, 0x78, 0x18, 0x79, 0xb1, 0x03,
	0xe8, 0x22, 0xd3, 0x4b, 0x19, 0x90, 0x03, 0x6d, 0xaf, 0x93, 0x2b, 0xdd, 0x7b, 0xd0, 0x5e, 0x50,
	0x30, 0xba, 0x2a, 0x18, 0x54, 0xf0, 0xfb, 0x60, 0x6b, 0x39, 0x37, 0x58, 0xf3, 0x18, 0xfa, 0x68,
	0x8d, 0x3e, 0x90, 0xb1, 0x31, 0xec, 0x2c, 0xf4, 0x5a, 0x1b, 0xd4, 0x27, 0x83, 0xf4, 0x01, 0xcf,
	0x74, 0xe7, 0xdf, 0x1a, 0xd0, 0x3d, 0x89, 0x55, 0x74, 0x8e, 0x01, 0x9e, 0xe3, 0xf7, 0x14, 0x94,
	0xe1, 0x4d, 0x72, 0xdc, 0x9e, 0x59, 0x9e, 0x05, 0x7c, 0xef, 0xf3, 0x8f, 0x9f, 0x5f, 0x1a, 0x43,
	0x6e, 0xd3, 0x23, 0xc1, 0x4c, 0x1d, 0x5b, 0x13, 0xf6, 0x04, 0xe0, 0xb5, 0x08, 0xc5, 0x32, 0xa7,
	0xd9, 0xf2, 0x80, 0xbb, 0x01, 0xe2, 0xfb, 0x34, 0x7b, 0x9b, 0x0d, 0xcd, 0xec, 0xec, 0xa3, 0x0c,
	0x3e, 0xb1, 0x63, 0xb0, 0x5f, 0xca, 0x2c, 0x57, 0x34, 0x4a, 0x17, 0x0f, 0x69, 0x69, 0xc2, 0xcd,
	0x19, 0xcd, 0xf7, 0x19, 0x98, 0xf9, 0x8c, 0x3d, 0x05, 0xb8, 0x48, 0x82, 0x1b, 0x58, 0x97, 0xee,
	0xbd, 0x47, 0x73, 0x77, 0x78, 0xed, 0x5e, 0x4d, 0xfc, 0x44, 0x84, 0x42, 0x8f, 0xff, 0x85, 0xf8,
	0xa4, 0x06, 0xa0, 0xed, 0x53, 0x91, 0x34, 0xf6, 0xd1, 0xeb, 0xda, 0x24, 0x52, 0xdb, 0xa7, 0x52,
	0x5d, 0xb3, 0x0f, 0x3f, 0x79, 0xc5, 0x3e, 0x9a, 0x2d, 0x0f, 0xb8, 0x1b, 0xa0, 0x9a, 0x7d, 0x38,
	0x5b, 0xb1, 0x4f, 0xd1, 0x28, 0x5d, 0xbc, 0xb1, 0x8f, 0x5a, 0x35, 0xfb, 0xe8, 0x9d, 0x6c, 0xec,
	0xab, 0xb3, 0x2e, 0xdd, 0x5b, 0xb5, 0xcf, 0xdc, 0x5b, 0xb1, 0xef, 0x5f, 0x88, 0x4f, 0x6a, 0x00,
	0xf3, 0x5f, 0x0d, 0x80, 0x93, 0xd8, 0xc4, 0xf6, 0x14, 0x06, 0xca, 0xc1, 0xe2, 0xe1, 0x56, 0x52,
	0xab, 0xe5, 0x98, 0x57, 0xc0, 0x0f, 0x08, 0x75, 0x97, 0xf7, 0x09, 0x55, 0x47, 0x1a, 0x49, 0xbd,
	0x80, 0x81, 0x72, 0xd3, 0xfc, 0x00, 0xaa, 0x93, 0x6e, 0x05, 0xb7, 0x90, 0xc7, 0x76, 0xcb, 0x38,
	0xca, 0xd9, 0x53, 0xe8, 0xa3, 0xb3, 0x86, 0x61, 0x95, 0xd0, 0xae, 0xf1, 0xb7, 0x38, 0xc0, 0xef,
	0x12, 0xd6, 0x2d, 0x36, 0x28, 0x63, 0x65, 0xec, 0x0c, 0x06, 0xca, 0xe5, 0x9b, 0x95, 0x55, 0xf9,
	0x1c, 0x12, 0xc6, 0x3e, 0xdf, 0xe6, 0xa3, 0xc5, 0x29, 0xc7, 0xff, 0x4b, 0xdc, 0x64, 0x1b, 0x6c,
	0xd1, 0xa1, 0xff, 0xd3, 0xc3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0x8a, 0xa7, 0x68, 0x05,
	0x07, 0x00, 0x00,
}
